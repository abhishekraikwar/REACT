{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { uiActions } from \"./ui-slice\";\nconst cartState = {\n  items: [],\n  totalQuantity: 0\n};\nconst cartslice = createSlice({\n  name: \"cart\",\n  initialState: cartState,\n  reducers: {\n    addItem(state, action) {\n      const newItem = action.payload;\n      state.totalQuantity++;\n      const existingItem = state.items.find(item => item.id === newItem.id);\n\n      if (!existingItem) {\n        state.items.push({\n          id: newItem.id,\n          price: newItem.price,\n          quantity: 1,\n          totalPrice: newItem.price,\n          name: newItem.title\n        });\n      } else {\n        existingItem.quantity++;\n        existingItem.totalPrice = existingItem.totalPrice + newItem.price;\n      }\n    },\n\n    removeItem(state, action) {\n      const id = action.payload;\n      const existingItemInCart = state.items.find(item => item.id === id);\n      state.totalQuantity--;\n\n      if (existingItemInCart.quantity === 1) {\n        state.items = state.items.filter(item => item.id !== id);\n      } else {\n        existingItemInCart.quantity--;\n        existingItemInCart.totalPrice = existingItemInCart.totalPrice - existingItemInCart.price;\n      }\n    }\n\n  }\n});\n\nconst sendCartdata = cartData => {\n  return async dispatch => {\n    dispatch(uiActions.showNotification({\n      status: \"pending\",\n      title: \"Sending...\",\n      message: \"sending cart data...\"\n    }));\n    const response = await fetch(\"https://react-http-80acb-default-rtdb.firebaseio.com/cart.json\", {\n      method: \"PUT\",\n      body: JSON.stringify(cart)\n    });\n\n    if (!response.ok) {\n      throw new Error(\"Sending data to cart failed\");\n    }\n  };\n};\n\nexport const cartActions = cartslice.actions;\nexport default cartslice;","map":{"version":3,"sources":["D:/dev/reactjs/Redux/adv-redux/src/Store/cartstate.js"],"names":["createSlice","uiActions","cartState","items","totalQuantity","cartslice","name","initialState","reducers","addItem","state","action","newItem","payload","existingItem","find","item","id","push","price","quantity","totalPrice","title","removeItem","existingItemInCart","filter","sendCartdata","cartData","dispatch","showNotification","status","message","response","fetch","method","body","JSON","stringify","cart","ok","Error","cartActions","actions"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,SAASC,SAAT,QAA0B,YAA1B;AACA,MAAMC,SAAS,GAAG;AAAEC,EAAAA,KAAK,EAAE,EAAT;AAAaC,EAAAA,aAAa,EAAE;AAA5B,CAAlB;AACA,MAAMC,SAAS,GAAGL,WAAW,CAAC;AAC5BM,EAAAA,IAAI,EAAE,MADsB;AAE5BC,EAAAA,YAAY,EAAEL,SAFc;AAG5BM,EAAAA,QAAQ,EAAE;AACRC,IAAAA,OAAO,CAACC,KAAD,EAAQC,MAAR,EAAgB;AACrB,YAAMC,OAAO,GAAGD,MAAM,CAACE,OAAvB;AACAH,MAAAA,KAAK,CAACN,aAAN;AACA,YAAMU,YAAY,GAAGJ,KAAK,CAACP,KAAN,CAAYY,IAAZ,CAAkBC,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYL,OAAO,CAACK,EAA/C,CAArB;;AACA,UAAI,CAACH,YAAL,EAAmB;AACjBJ,QAAAA,KAAK,CAACP,KAAN,CAAYe,IAAZ,CAAiB;AACfD,UAAAA,EAAE,EAAEL,OAAO,CAACK,EADG;AAEfE,UAAAA,KAAK,EAAEP,OAAO,CAACO,KAFA;AAGfC,UAAAA,QAAQ,EAAE,CAHK;AAIfC,UAAAA,UAAU,EAAET,OAAO,CAACO,KAJL;AAKfb,UAAAA,IAAI,EAAEM,OAAO,CAACU;AALC,SAAjB;AAOD,OARD,MASI;AACAR,QAAAA,YAAY,CAACM,QAAb;AACAN,QAAAA,YAAY,CAACO,UAAb,GAA0BP,YAAY,CAACO,UAAb,GAAwBT,OAAO,CAACO,KAA1D;AACH;AAEF,KAnBO;;AAoBRI,IAAAA,UAAU,CAACb,KAAD,EAAOC,MAAP,EAAe;AACrB,YAAMM,EAAE,GAAGN,MAAM,CAACE,OAAlB;AAEA,YAAMW,kBAAkB,GAAGd,KAAK,CAACP,KAAN,CAAYY,IAAZ,CAAiBC,IAAI,IAAIA,IAAI,CAACC,EAAL,KAAYA,EAArC,CAA3B;AACAP,MAAAA,KAAK,CAACN,aAAN;;AACA,UAAGoB,kBAAkB,CAACJ,QAAnB,KAA8B,CAAjC,EAAmC;AAC/BV,QAAAA,KAAK,CAACP,KAAN,GAAcO,KAAK,CAACP,KAAN,CAAYsB,MAAZ,CAAmBT,IAAI,IAAIA,IAAI,CAACC,EAAL,KAAWA,EAAtC,CAAd;AACH,OAFD,MAGI;AACAO,QAAAA,kBAAkB,CAACJ,QAAnB;AACAI,QAAAA,kBAAkB,CAACH,UAAnB,GAAgCG,kBAAkB,CAACH,UAAnB,GAA8BG,kBAAkB,CAACL,KAAjF;AACH;AACF;;AAhCK;AAHkB,CAAD,CAA7B;;AAuCA,MAAMO,YAAY,GAAIC,QAAD,IAAa;AAChC,SAAO,MAAOC,QAAP,IAAmB;AACxBA,IAAAA,QAAQ,CACN3B,SAAS,CAAC4B,gBAAV,CAA2B;AACzBC,MAAAA,MAAM,EAAE,SADiB;AAEzBR,MAAAA,KAAK,EAAE,YAFkB;AAGzBS,MAAAA,OAAO,EAAE;AAHgB,KAA3B,CADM,CAAR;AAOA,UAAMC,QAAQ,GAAG,MAAMC,KAAK,CAC1B,gEAD0B,EAE1B;AACEC,MAAAA,MAAM,EAAE,KADV;AAEEC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeC,IAAf;AAFR,KAF0B,CAA5B;;AAQA,QAAI,CAACN,QAAQ,CAACO,EAAd,EAAkB;AAChB,YAAM,IAAIC,KAAJ,CAAU,6BAAV,CAAN;AACD;AACF,GAnBD;AAoBD,CArBD;;AAuBA,OAAO,MAAMC,WAAW,GAAGpC,SAAS,CAACqC,OAA9B;AACP,eAAerC,SAAf","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { uiActions } from \"./ui-slice\";\r\nconst cartState = { items: [], totalQuantity: 0 };\r\nconst cartslice = createSlice({\r\n  name: \"cart\",\r\n  initialState: cartState,\r\n  reducers: {\r\n    addItem(state, action) {\r\n      const newItem = action.payload;\r\n      state.totalQuantity++;\r\n      const existingItem = state.items.find((item) => item.id === newItem.id);\r\n      if (!existingItem) {\r\n        state.items.push({\r\n          id: newItem.id,\r\n          price: newItem.price,\r\n          quantity: 1,\r\n          totalPrice: newItem.price,\r\n          name: newItem.title,\r\n        });\r\n      }\r\n      else{\r\n          existingItem.quantity++;\r\n          existingItem.totalPrice = existingItem.totalPrice+newItem.price;\r\n      }\r\n      \r\n    },\r\n    removeItem(state,action) {\r\n        const id = action.payload;\r\n        \r\n        const existingItemInCart = state.items.find(item => item.id === id);\r\n        state.totalQuantity--;\r\n        if(existingItemInCart.quantity===1){\r\n            state.items = state.items.filter(item => item.id !==id);\r\n        }\r\n        else{\r\n            existingItemInCart.quantity--;\r\n            existingItemInCart.totalPrice = existingItemInCart.totalPrice-existingItemInCart.price;\r\n        }\r\n      }\r\n  },\r\n});\r\n\r\nconst sendCartdata = (cartData) =>{\r\n  return async (dispatch) =>{\r\n    dispatch(\r\n      uiActions.showNotification({\r\n        status: \"pending\",\r\n        title: \"Sending...\",\r\n        message: \"sending cart data...\",\r\n      })\r\n    )\r\n    const response = await fetch(\r\n      \"https://react-http-80acb-default-rtdb.firebaseio.com/cart.json\",\r\n      {\r\n        method: \"PUT\",\r\n        body: JSON.stringify(cart),\r\n      }\r\n    );\r\n\r\n    if (!response.ok) {\r\n      throw new Error(\"Sending data to cart failed\");\r\n    } \r\n  }\r\n};\r\n\r\nexport const cartActions = cartslice.actions;\r\nexport default cartslice;\r\n"]},"metadata":{},"sourceType":"module"}