{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { uiActions } from \"./ui-slice\";\nconst cartState = {\n  items: [],\n  totalQuantity: 0\n};\nconst cartslice = createSlice({\n  name: \"cart\",\n  initialState: cartState,\n  reducers: {\n    addItem(state, action) {\n      const newItem = action.payload;\n      state.totalQuantity++;\n      const existingItem = state.items.find(item => item.id === newItem.id);\n\n      if (!existingItem) {\n        state.items.push({\n          id: newItem.id,\n          price: newItem.price,\n          quantity: 1,\n          totalPrice: newItem.price,\n          name: newItem.title\n        });\n      } else {\n        existingItem.quantity++;\n        existingItem.totalPrice = existingItem.totalPrice + newItem.price;\n      }\n    },\n\n    removeItem(state, action) {\n      const id = action.payload;\n      const existingItemInCart = state.items.find(item => item.id === id);\n      state.totalQuantity--;\n\n      if (existingItemInCart.quantity === 1) {\n        state.items = state.items.filter(item => item.id !== id);\n      } else {\n        existingItemInCart.quantity--;\n        existingItemInCart.totalPrice = existingItemInCart.totalPrice - existingItemInCart.price;\n      }\n    }\n\n  }\n});\nexport const sendCartdata = cart => {\n  return async dispatch => {\n    dispatch(uiActions.showNotification({\n      status: \"pending\",\n      title: \"Sending...\",\n      message: \"sending cart data...\"\n    }));\n\n    const sendRequest = async () => {\n      const response = await fetch(\"https://react-http-80acb-default-rtdb.firebaseio.com/cart.json\", {\n        method: \"PUT\",\n        body: JSON.stringify(cart)\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Sending data to cart failed\");\n      }\n    };\n\n    try {\n      await sendRequest();\n      dispatch(uiActions.showNotification({\n        status: \"success\",\n        title: \"Success!\",\n        message: \"Sent cart data...\"\n      }));\n    } catch (error) {\n      dispatch(uiActions.showNotification({\n        status: \"error\",\n        title: \"Failed\",\n        message: \"Sending data failed\"\n      }));\n    }\n  };\n};\nexport const cartActions = cartslice.actions;\nexport default cartslice;","map":{"version":3,"sources":["D:/dev/reactjs/Redux/adv-redux/src/Store/cartstate.js"],"names":["createSlice","uiActions","cartState","items","totalQuantity","cartslice","name","initialState","reducers","addItem","state","action","newItem","payload","existingItem","find","item","id","push","price","quantity","totalPrice","title","removeItem","existingItemInCart","filter","sendCartdata","cart","dispatch","showNotification","status","message","sendRequest","response","fetch","method","body","JSON","stringify","ok","Error","error","cartActions","actions"],"mappings":"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","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { uiActions } from \"./ui-slice\";\r\nconst cartState = { items: [], totalQuantity: 0 };\r\nconst cartslice = createSlice({\r\n  name: \"cart\",\r\n  initialState: cartState,\r\n  reducers: {\r\n    addItem(state, action) {\r\n      const newItem = action.payload;\r\n      state.totalQuantity++;\r\n      const existingItem = state.items.find((item) => item.id === newItem.id);\r\n      if (!existingItem) {\r\n        state.items.push({\r\n          id: newItem.id,\r\n          price: newItem.price,\r\n          quantity: 1,\r\n          totalPrice: newItem.price,\r\n          name: newItem.title,\r\n        });\r\n      } else {\r\n        existingItem.quantity++;\r\n        existingItem.totalPrice = existingItem.totalPrice + newItem.price;\r\n      }\r\n    },\r\n    removeItem(state, action) {\r\n      const id = action.payload;\r\n\r\n      const existingItemInCart = state.items.find((item) => item.id === id);\r\n      state.totalQuantity--;\r\n      if (existingItemInCart.quantity === 1) {\r\n        state.items = state.items.filter((item) => item.id !== id);\r\n      } else {\r\n        existingItemInCart.quantity--;\r\n        existingItemInCart.totalPrice =\r\n          existingItemInCart.totalPrice - existingItemInCart.price;\r\n      }\r\n    },\r\n  },\r\n});\r\n\r\nexport const sendCartdata = (cart) => {\r\n  return async (dispatch) => {\r\n    dispatch(\r\n      uiActions.showNotification({\r\n        status: \"pending\",\r\n        title: \"Sending...\",\r\n        message: \"sending cart data...\",\r\n      })\r\n    );\r\n    const sendRequest = async () => {\r\n      const response = await fetch(\r\n        \"https://react-http-80acb-default-rtdb.firebaseio.com/cart.json\",\r\n        {\r\n          method: \"PUT\",\r\n          body: JSON.stringify(cart),\r\n        }\r\n      );\r\n\r\n      if (!response.ok) {\r\n        throw new Error(\"Sending data to cart failed\");\r\n      }\r\n    };\r\n    try {\r\n      await sendRequest();\r\n      dispatch(\r\n        uiActions.showNotification({\r\n          status: \"success\",\r\n          title: \"Success!\",\r\n          message: \"Sent cart data...\",\r\n        })\r\n      );\r\n    } catch (error) {\r\n      dispatch(\r\n        uiActions.showNotification({\r\n          status: \"error\",\r\n          title: \"Failed\",\r\n          message: \"Sending data failed\",\r\n        })\r\n      );\r\n    }\r\n  };\r\n};\r\n\r\nexport const cartActions = cartslice.actions;\r\nexport default cartslice;\r\n"]},"metadata":{},"sourceType":"module"}